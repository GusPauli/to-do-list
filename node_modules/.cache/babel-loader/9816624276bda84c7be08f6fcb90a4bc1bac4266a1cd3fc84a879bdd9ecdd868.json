{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-aa9e476e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0,\n  class: \"stack-small\"\n};\nconst _hoisted_2 = {\n  class: \"custom-checkbox\"\n};\nconst _hoisted_3 = [\"id\", \"checked\"];\nconst _hoisted_4 = [\"for\"];\nconst _hoisted_5 = {\n  class: \"btn-group\"\n};\nconst _hoisted_6 = {\n  class: \"visually-hidden\"\n};\nconst _hoisted_7 = {\n  class: \"visually-hidden\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_to_do_item_edit_form = _resolveComponent(\"to-do-item-edit-form\");\n  return !$data.isEditing ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    class: \"checkbox\",\n    id: $props.id,\n    checked: $options.isDone,\n    onChange: _cache[0] || (_cache[0] = $event => _ctx.$emit('checkbox-changed'))\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_3), _createElementVNode(\"label\", {\n    for: $props.id,\n    class: \"checkbox-label\"\n  }, _toDisplayString($props.label), 9 /* TEXT, PROPS */, _hoisted_4)]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn\",\n    ref: \"editButton\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.toggleToItemEditForm && $options.toggleToItemEditForm(...args))\n  }, [_createTextVNode(\" Edit \"), _createElementVNode(\"span\", _hoisted_6, _toDisplayString($props.label), 1 /* TEXT */)], 512 /* NEED_PATCH */), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn__danger\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.deleteToDo && $options.deleteToDo(...args))\n  }, [_createTextVNode(\" Delete \"), _createElementVNode(\"span\", _hoisted_7, _toDisplayString($props.label), 1 /* TEXT */)])])])) : (_openBlock(), _createBlock(_component_to_do_item_edit_form, {\n    key: 1,\n    id: $props.id,\n    label: $props.label,\n    onItemEdited: $options.itemEdited,\n    onEditCancelled: $options.editCancelled\n  }, null, 8 /* PROPS */, [\"id\", \"label\", \"onItemEdited\", \"onEditCancelled\"]));\n}","map":{"version":3,"mappings":";;;;EACOA,KAAK,EAAC;;;EACJA,KAAK,EAAC;AAAiB;;;;EASvBA,KAAK,EAAC;AAAW;;EAOZA,KAAK,EAAC;AAAiB;;EAIvBA,KAAK,EAAC;AAAiB;;;UArBHC,eAAS,kBAAzCC,oBAwBM,OAxBNC,UAwBM,GAvBJC,oBAQM,OARNC,UAQM,GAPJD,oBAKwC;IAJtCE,IAAI,EAAC,UAAU;IACfN,KAAK,EAAC,UAAU;IACfO,EAAE,EAAEC,SAAE;IACNC,OAAO,EAAEC,eAAM;IACfC,QAAM,sCAAEC,UAAK;wDAChBR,oBAA2D;IAAnDS,GAAG,EAAEL,SAAE;IAAER,KAAK,EAAC;sBAAoBQ,YAAK,uCAElDJ,oBAaM,OAbNU,UAaM,GAZJV,oBAOS;IANPE,IAAI,EAAC,QAAQ;IACbN,KAAK,EAAC,KAAK;IACXe,GAAG,EAAC,YAAY;IACfC,OAAK,yCAAEN,uEAAoB;uBAAE,QAE9B,uBAAgD,QAAhDO,UAAgD,mBAAfT,YAAK,0CAExCJ,oBAGS;IAHDE,IAAI,EAAC,QAAQ;IAACN,KAAK,EAAC,iBAAiB;IAAEgB,OAAK,yCAAEN,mDAAU;uBAAE,UAEhE,uBAAgD,QAAhDQ,UAAgD,mBAAfV,YAAK,yCAI5CW,aAKyDC;;IAHtDb,EAAE,EAAEC,SAAE;IACNa,KAAK,EAAEb,YAAK;IACZc,YAAW,EAAEZ,mBAAU;IACvBa,eAAc,EAAEb","names":["class","$data","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","type","id","$props","checked","$options","onChange","_ctx","for","_hoisted_5","ref","onClick","_hoisted_6","_hoisted_7","_createBlock","_component_to_do_item_edit_form","label","onItemEdited","onEditCancelled"],"sourceRoot":"","sources":["/home/gustavopauli/√Årea de Trabalho/UNIOESTE 2022/tds/to-do-list/todo-vue/src/components/ToDoItem.vue"],"sourcesContent":["<template>\n  <div class=\"stack-small\" v-if=\"!isEditing\">\n    <div class=\"custom-checkbox\">\n      <input\n        type=\"checkbox\"\n        class=\"checkbox\"\n        :id=\"id\"\n        :checked=\"isDone\"\n        @change=\"$emit('checkbox-changed')\" />\n      <label :for=\"id\" class=\"checkbox-label\">{{ label }}</label>\n    </div>\n    <div class=\"btn-group\">\n      <button\n        type=\"button\"\n        class=\"btn\"\n        ref=\"editButton\"\n        @click=\"toggleToItemEditForm\">\n        Edit\n        <span class=\"visually-hidden\">{{ label }}</span>\n      </button>\n      <button type=\"button\" class=\"btn btn__danger\" @click=\"deleteToDo\">\n        Delete\n        <span class=\"visually-hidden\">{{ label }}</span>\n      </button>\n    </div>\n  </div>\n  <to-do-item-edit-form\n    v-else\n    :id=\"id\"\n    :label=\"label\"\n    @item-edited=\"itemEdited\"\n    @edit-cancelled=\"editCancelled\"></to-do-item-edit-form>\n</template>\n\n<script>\nimport ToDoItemEditForm from \"./ToDoItemEditForm.vue\";\n\nexport default {\n  components: {\n    ToDoItemEditForm,\n  },\n  props: {\n    label: { required: true, type: String },\n    done: { default: false, type: Boolean },\n    id: { required: true, type: String },\n  },\n  data() {\n    return {\n      isEditing: false,\n    };\n  },\n  computed: {\n    isDone() {\n      return this.done;\n    },\n  },\n  methods: {\n    deleteToDo() {\n      this.$emit(\"item-deleted\");\n    },\n    toggleToItemEditForm() {\n      console.log(this.$refs.editButton);\n      this.isEditing = true;\n    },\n    itemEdited(newLabel) {\n      this.$emit(\"item-edited\", newLabel);\n      this.isEditing = false;\n      this.focusOnEditButton();\n    },\n    editCancelled() {\n      this.isEditing = false;\n      this.focusOnEditButton();\n    },\n    focusOnEditButton() {\n      this.$nextTick(() => {\n        const editButtonRef = this.$refs.editButton;\n        editButtonRef.focus();\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.custom-checkbox > .checkbox-label {\n  font-family: Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  font-weight: 400;\n  font-size: 16px;\n  font-size: 1rem;\n  line-height: 1.25;\n  color: #0b0c0c;\n  display: block;\n  margin-bottom: 5px;\n}\n.custom-checkbox > .checkbox {\n  font-family: Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  font-weight: 400;\n  font-size: 16px;\n  font-size: 1rem;\n  line-height: 1.25;\n  box-sizing: border-box;\n  width: 100%;\n  height: 40px;\n  height: 2.5rem;\n  margin-top: 0;\n  padding: 5px;\n  border: 2px solid #0b0c0c;\n  border-radius: 0;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n.custom-checkbox > input:focus {\n  outline: 3px dashed #fd0;\n  outline-offset: 0;\n  box-shadow: inset 0 0 0 2px;\n}\n.custom-checkbox {\n  font-family: Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  font-weight: 400;\n  font-size: 1.6rem;\n  line-height: 1.25;\n  display: block;\n  position: relative;\n  min-height: 40px;\n  margin-bottom: 10px;\n  padding-left: 40px;\n  clear: left;\n}\n.custom-checkbox > input[type=\"checkbox\"] {\n  -webkit-font-smoothing: antialiased;\n  cursor: pointer;\n  position: absolute;\n  z-index: 1;\n  top: -2px;\n  left: -2px;\n  width: 44px;\n  height: 44px;\n  margin: 0;\n  opacity: 0;\n}\n.custom-checkbox > .checkbox-label {\n  font-size: inherit;\n  font-family: inherit;\n  line-height: inherit;\n  display: inline-block;\n  margin-bottom: 0;\n  padding: 8px 15px 5px;\n  cursor: pointer;\n  touch-action: manipulation;\n}\n.custom-checkbox > label::before {\n  content: \"\";\n  box-sizing: border-box;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 40px;\n  height: 40px;\n  border: 2px solid currentColor;\n  background: transparent;\n}\n.custom-checkbox > input[type=\"checkbox\"]:focus + label::before {\n  border-width: 4px;\n  outline: 3px dashed #228bec;\n}\n.custom-checkbox > label::after {\n  box-sizing: content-box;\n  content: \"\";\n  position: absolute;\n  top: 11px;\n  left: 9px;\n  width: 18px;\n  height: 7px;\n  transform: rotate(-45deg);\n  border: solid;\n  border-width: 0 0 5px 5px;\n  border-top-color: transparent;\n  opacity: 0;\n  background: transparent;\n}\n.custom-checkbox > input[type=\"checkbox\"]:checked + label::after {\n  opacity: 1;\n}\n@media only screen and (min-width: 40rem) {\n  label,\n  input,\n  .custom-checkbox {\n    font-size: 19px;\n    font-size: 1.9rem;\n    line-height: 1.31579;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}